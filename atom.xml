<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr Li Notes</title>
  
  <subtitle>阳光 幽默 努力 拼搏</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lizengguangxx.github.io/"/>
  <updated>2018-11-01T10:55:15.177Z</updated>
  <id>https://lizengguangxx.github.io/</id>
  
  <author>
    <name>lizengguang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css3</title>
    <link href="https://lizengguangxx.github.io/2018/11/01/css3/"/>
    <id>https://lizengguangxx.github.io/2018/11/01/css3/</id>
    <published>2018-11-01T10:53:33.000Z</published>
    <updated>2018-11-01T10:55:15.177Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="知识积累" scheme="https://lizengguangxx.github.io/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="css" scheme="https://lizengguangxx.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>babylon</title>
    <link href="https://lizengguangxx.github.io/2018/11/01/babylon/"/>
    <id>https://lizengguangxx.github.io/2018/11/01/babylon/</id>
    <published>2018-11-01T02:22:07.000Z</published>
    <updated>2018-11-01T10:29:55.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相机"><a href="#相机" class="headerlink" title="相机"></a>相机</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// 弧形旋转相机 &gt;&gt; 使用鼠标和光标键将相机绕着一个三维点(此处时0坐标处) 旋转</span><br><span class="line">// 参数: 名称, 水平角(alpha), 垂直角(beta), 半径, 围绕的目标, 场景</span><br><span class="line"></span><br><span class="line">var camera = new BABYLON.ArcRotateCamera(&quot;ArcRotateCamera&quot;, 1, 0.8, 10, new BABYLON.Vector3(0, 0, 0), scene);</span><br><span class="line">cameras.target = new BABYLON.Vector3(0,0,0);</span><br><span class="line"></span><br><span class="line">// 自由相机 &gt;&gt; 你可以使用鼠标和光标键将之在场景中移动</span><br><span class="line">// 参数: 名称，位置，场景</span><br><span class="line">var camera = new BABYLON.FreeCamera(&quot;FreeCamera&quot;, new BABYLON.Vector3(0, 1, -15), scene);</span><br><span class="line"> cameras.setTarget(new BABYLON.Vector3(0,0,0));</span><br><span class="line"></span><br><span class="line">// 触控相机 &gt;&gt; 使用触控设备来在场景中移动它</span><br><span class="line">// 参数: 名称，位置，场景</span><br><span class="line">var camera = new BABYLON.TouchCamera(&quot;TouchCamera&quot;, new BABYLON.Vector3(0, 1, -15), scene);</span><br><span class="line">//使用 setPosition() 把相机准确地放置到我们期望的三维空间中的位置. 便捷的 setPosition() 方法将会做好剩下的事情</span><br><span class="line"> camera.setPosition(new BABYLON.Vector3(0, 15, -30));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //对象上下移动范围</span><br><span class="line">    camera.lowerBetaLimit = Math.PI/2-Math.PI/6;</span><br><span class="line">    camera.upperBetaLimit = Math.PI/2+Math.PI/6;</span><br><span class="line"></span><br><span class="line">    //对象左右移动范围</span><br><span class="line">    camera.lowerAlphaLimit = -Math.PI/2-Math.PI/5;</span><br><span class="line">    camera.upperAlphaLimit = -Math.PI/2+Math.PI/5;</span><br><span class="line">    //对象远近移动范围</span><br><span class="line">   camera.lowerRadiusLimit  = -Math.PI/3;</span><br><span class="line">   camera.upperRadiusLimit = Math.PI/3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   camera.wheelPrecision = 0.5;  //电脑滚轮速度 越小灵敏都越高</span><br><span class="line">   camera.pinchPrecision = 1;    //手机放大缩小速度 越小灵敏都越高</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//定向相机， 根据设备导向事件做出反应的相机 ， 例如向前或向后倾斜的现代化移动设备</span><br><span class="line">   var camera = new BABYLON.DeviceOrientationCamera(&quot;DevOr_camera&quot;, new BABYLON.Vector3(0, 0, 0), scene);</span><br><span class="line">    // Targets the camera to a particular positiion</span><br><span class="line">    camera.setTarget(new BABYLON.Vector3(0, 0, -10));</span><br><span class="line">    // Sets the sensitivity of the camera to movement and rotation</span><br><span class="line">    camera.angularSensibility = 10;</span><br><span class="line">    camera.moveSensibility = 10;</span><br><span class="line">    // Attach the camera to the canvas</span><br><span class="line">    camera.attachControl(canvas, true);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//可旋转相机</span><br><span class="line"> camera.attachControl(canvas, true);</span><br><span class="line"></span><br><span class="line">//不可旋转相机</span><br><span class="line"> camera.detachControl(canvas);</span><br><span class="line"></span><br><span class="line"> camera.inertia  //相机惯性</span><br><span class="line"> camera.targetScreenOffset.x=40;</span><br><span class="line"> camera.targetScreenOffset.y=-70;</span><br><span class="line"></span><br><span class="line"> //获取摄像机能看到的mesh</span><br><span class="line">scene.activeCamera.getActiveMeshes()</span><br><span class="line">scene.getActiveMeshes()</span><br><span class="line"></span><br><span class="line">//判断mesh是否在摄像机范围内</span><br><span class="line">scene.isActiveMesh(scene.meshes[2])</span><br><span class="line">scene.activeCamera.isActiveMesh(scene.meshes[2])</span><br></pre></td></tr></table></figure><h1 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a>灯光</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//漫反射(diffuse) 和 镜面反射(specular) 属性来控制任何光源的颜色:</span><br><span class="line">//点光源</span><br><span class="line">//点光源时世界空间中由一个唯一点定义的光源. 光源从该点向所有方向发射光线. 点光源的一个好例子是太阳.</span><br><span class="line">var light0 = new BABYLON.PointLight(&quot;Omni0&quot;, new BABYLON.Vector3(1, 10, 1), scene);</span><br><span class="line">light0.diffuse = new BABYLON.Color3(1, 0, 0);</span><br><span class="line">light0.specular = new BABYLON.Color3(1, 1, 1);</span><br><span class="line"></span><br><span class="line">//定向光源</span><br><span class="line">//定向光建立在原点(0,0,0)的位置. 像点光源一样,</span><br><span class="line">var light0 = new BABYLON.DirectionalLight(&quot;Dir0&quot;, new BABYLON.Vector3(0, -1, 0), scene);</span><br><span class="line">light0.diffuse = new BABYLON.Color3(1, 0, 0);</span><br><span class="line"></span><br><span class="line">//聚光灯光源</span><br><span class="line">//一个聚光灯光源是通过一个位置 (第二个参数), 一个方向(第三个参数), 一个角度(第四个参数), 和一个衰减指数(第五个参数)定义的. 这些值定义了一个圆椎体，光源从中发射出来.</span><br><span class="line">//角度(弧度单位)定义了聚光灯光源椎体光束的大小(照明q区域), 同时指数定义了光随距离(光照射的距离)衰减的速度</span><br><span class="line">//个带红色漫反射的白色镜面反射光聚光灯光源，椎体0.8弧度，衰减指数2</span><br><span class="line">var light0 = new BABYLON.SpotLight(&quot;Spot0&quot;, new BABYLON.Vector3(0, 30, -10), new BABYLON.Vector3(0, -10, 0), 0.8, 2, scene);</span><br><span class="line">light0.diffuse = new BABYLON.Color3(1, 0, 0);</span><br><span class="line">light0.specular = new BABYLON.Color3(1, 1, 1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//半球状光源</span><br><span class="line">//半球光源是模式现实环境光的简单方法. 半球光源是通过一个朝天的方向(构造函数的第二个参数)和三种颜色定义， 一种颜色提供给漫反射(天空的颜色-朝上的像素/面片)，一种是给地面的 (朝下的像素/面片的颜色), 以及一种给镜面反射的.</span><br><span class="line">//白/黑半球光源 - 朝上的像素白色(漫反射), 朝下的像素黑色(底色)</span><br><span class="line">var light0 = new BABYLON.HemisphericLight(&quot;Hemi0&quot;, new BABYLON.Vector3(0, 1, 0), scene);</span><br><span class="line">light0.diffuse = new BABYLON.Color3(1, 1, 1);</span><br><span class="line">light0.specular = new BABYLON.Color3(1, 1, 1);</span><br><span class="line">light0.groundColor = new BABYLON.Color3(0, 0, 0);</span><br><span class="line"></span><br><span class="line">scene.lights[0].excludedMeshes.push(mesh)</span><br><span class="line">     // mesh不受灯光影响</span><br><span class="line"></span><br><span class="line">//清除灯光</span><br><span class="line"> if (scene.lights[0]) &#123;</span><br><span class="line">      scene.lights[0].setEnabled(false);</span><br><span class="line">      scene.lights[0].dispose();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">// 物体</span><br><span class="line">//创建一个球体</span><br><span class="line">var sphere = BABYLON.Mesh.CreateSphere(&quot;sphere&quot;, 10.0, 10.0, 场景, false,  BABYLON.Mesh.DEFAULTSIDE);</span><br><span class="line">//参数为: 名字, 细分段数 (高度细节或不需), 大小, 将被放到的场景, 是否可更新?(如果该网格后面必须被更新) 和可选的面朝向(参见下面).</span><br><span class="line">// 如果你需要默认的表现那么最后两个参数可以忽略:</span><br><span class="line"></span><br><span class="line">//创建一个平面</span><br><span class="line">var plane = BABYLON.Mesh.CreatePlane(&quot;plane&quot;, 10.0, scene, false, BABYLON.Mesh.DEFAULTSIDE);</span><br><span class="line">//参数为: 名字, 大小, 和将被放到的场景, 是否可更新?(如果该网格后面必须被更新) 和可选的面朝向(参见下面).</span><br><span class="line">//如果你需要默认的表现,那么最后两个参数可以忽略 :</span><br><span class="line"></span><br><span class="line">//创建一个盘片(或着一个规则多边形)</span><br><span class="line">var disc = BABYLON.Mesh.·CreateDisc(&quot;disc&quot;, 5, 30, scene, false, BABYLON.Mesh.DEFAULTSIDE);</span><br><span class="line">//参数为: 名字, 半径, 边数, 场景, 可更新否和可选的朝向(参见下面). 如果你需要默认的表现,那么最后两个参数参数可以忽略:</span><br><span class="line"></span><br><span class="line">//创建一个圆柱体</span><br><span class="line">var cylinder = BABYLON.Mesh.CreateCylinder(&quot;cylinder&quot;, 3, 3, 3, 6, 1, 场景, false, BABYLON.Mesh.DEFAULTSIDE);</span><br><span class="line">//参数为: 名称, 高度, 顶直径, 底直径, 边数, 高向细分度, 场景, 可更新否和可选的朝向(参见下面). 如果你需要默认表现,那么最后两个参数可以忽略:</span><br><span class="line"></span><br><span class="line">//创建一个环面体</span><br><span class="line">var torus = BABYLON.Mesh.CreateTorus(&quot;torus&quot;, 5, 1, 10, scene, false, BABYLON.Mesh.DEFAULTSIDE);</span><br><span class="line">//参数为: 名称, 直径, 厚度, 边数(高度细节或不是), 场景, 可更新否和可选的朝向(参见下面). 如果你使用默认表现那么最后两个参数可忽略 :</span><br><span class="line"></span><br><span class="line">//创建一个结</span><br><span class="line">var knot = BABYLON.Mesh.CreateTorusKnot(&quot;knot&quot;, 2, 0.5, 128, 64, 2, 3, scene, false, BABYLON.Mesh.DEFAULTSIDE);</span><br><span class="line">//参数为: 名称, 半径, tube, 半径上分段数, tubularSegments, p, q, 场景, 可更新否和可选的朝向(参见下面).</span><br><span class="line">//如果你使用默认的表现那么最后的两个参数可以忽略 :</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var ground = BABYLON.Mesh.CreateGround(&quot;ground&quot;, 6, 6, 2, scene);</span><br><span class="line">//参数为: 名称, 宽度, 纵深, 子分段数, 场景</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new SubMesh（materialIndex，verticesStart，verticesCount，indexStart，indexCount，mesh，renderingMesh，createBoundingBox）</span><br><span class="line">//materialIndex数要使用的材料的索引（此索引用于在多材质的subMaterials集合内找到正确的材质）</span><br><span class="line">//verticesStart数</span><br><span class="line">//verticesCount数使用的顶点数</span><br><span class="line">//indexStart任何要使用的第一个indice的索引</span><br><span class="line">//indexCount数指数计数</span><br><span class="line">//网格摘要Mesh@param mesh</span><br><span class="line">//可选的renderingMesh网格如果已定义，则用于代替网格参数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//如果将diameterTop设置为零，则会得到锥体而不是圆柱体。示例：</span><br><span class="line">var cone = BABYLON.MeshBuilder.CreateCylinder(&quot;cone&quot;, &#123;diameterTop: 0, tessellation: 4&#125;, scene);</span><br><span class="line"></span><br><span class="line">//MergeMeshes 合并网格</span><br><span class="line">var boxes_merged = BABYLON.Mesh.MergeMeshes(scene.getMeshesByTags(&quot;box&quot;));</span><br><span class="line">boxes_merged.position.x = 0;</span><br><span class="line"></span><br><span class="line"> 改变rotation和translate 使用scene.registerAfterRender优于scene.registerBeforeRender，计算将发生在每个网格的世界矩阵计算之后。</span><br><span class="line"></span><br><span class="line"> position 是mesh的位置</span><br><span class="line">absolutePosition是 mesh轴的位置</span><br><span class="line"></span><br><span class="line">plane.subdivide(n)</span><br><span class="line"></span><br><span class="line">      sphere.subMeshes[0].indexCount=1000;</span><br><span class="line">    console.log(sphere.subMeshes[0].indexCount);</span><br><span class="line"></span><br><span class="line">//创建空mesh</span><br><span class="line">  new BABYLON.Mesh(&quot;a&quot;, scene);</span><br><span class="line"></span><br><span class="line"> mesh.getVerticesDataKinds() // 获取数据类型 位置/uv/ color/材质</span><br></pre></td></tr></table></figure><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">//创建动画对象：</span><br><span class="line">var animationBox = new BABYLON.Animation(&quot;myAnimation&quot;, &quot;scaling.x&quot;, 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);</span><br><span class="line">/*参数1 - 动画的名称，仅此而已。</span><br><span class="line">参数 2 - 关心的属性。这个可以是网格的任何属性，取决于你要修改什么。此处我们想在X轴方向上放大对象, 所以此处使用“scaling.x”。</span><br><span class="line">参数 3 - 请求的每秒帧数：这个动画里最大 的FPS。</span><br><span class="line">参数 4 - 修改的类型。此处你决定开始修改什么类型的数据：floating（比如是浮点数），一个向量(比如是方向)，或四元数。具体的值会是：</span><br><span class="line">BABYLON.Animation.ANIMATIONTYPE_FLOAT</span><br><span class="line">BABYLON.Animation.ANIMATIONTYPE_VECTOR2</span><br><span class="line">BABYLON.Animation.ANIMATIONTYPE_VECTOR3</span><br><span class="line">BABYLON.Animation.ANIMATIONTYPE_QUATERNION</span><br><span class="line">BABYLON.Animation.ANIMATIONTYPE_MATRIX</span><br><span class="line">BABYLON.Animation.ANIMATIONTYPE_COLOR3</span><br><span class="line">参数 5 - 最后, 你需要决定并输入这个动画的行为类型，这些会决定动画的受限(比如:当到最后一帧时是否继续，是否重新开始，或者停止)：</span><br><span class="line">使用之前的值然后递增： BABYLON.Animation.ANIMATIONLOOPMODE_RELATIVE</span><br><span class="line">从初始值重启 BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE</span><br><span class="line">保持最后的值: BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建动画</span><br><span class="line">CreateAndStartAnimation(name, node, targetProperty, framePerSecond, totalFrame, from, to, loopMode, easingFunction, onAnimationEnd)</span><br><span class="line">BABYLON.Animation.CreateAndStartAnimation(&quot;mesh&quot;, mesh[0], &apos;rotation.y&apos;, 30, 150, mesh[0].rotation.y, mesh[0].rotation.y+(Math.PI*2), 1);</span><br><span class="line">// name姓名</span><br><span class="line">// node节点（目标）</span><br><span class="line">// targetProperty目标属性</span><br><span class="line">// framePerSecond帧每秒</span><br><span class="line">// totalFrame总共帧数</span><br><span class="line">// from开始状态</span><br><span class="line">// to结束状态</span><br><span class="line">// loopMode循环模式(次数)  可选</span><br><span class="line">// easingFunctionEasingFunction 可选</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//此操作将创建一个动画以将属性的当前值插入给定目标</span><br><span class="line">new InterpolateValueAction(triggerOptions, target, propertyPath, value, duration, condition, stopOtherAnimations, onInterpolationDone)</span><br><span class="line">// triggerOptions     The trigger   //触发器选项</span><br><span class="line">// target     The target    //目标</span><br><span class="line">// propertyPath    Property of the target  //目标的属性</span><br><span class="line">// value    The target value  //目标的值</span><br><span class="line">// duration        The duration (可选的)  //持续时间</span><br><span class="line">// condition        The condition(可选的)    //条件</span><br><span class="line">// stopOtherAnimations boolean(可选的)  //停止其他动画</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> new CombineAction(triggerOptions, children, condition) ：</span><br><span class="line"> //此操作是一个容器。 您可以使用它在同一触发器上同时执行多个操作。 children属性必须是一个操作数组</span><br><span class="line">// triggerOptions：触发器选项</span><br><span class="line">// children  ：The childrens actions</span><br><span class="line">// condition ： 执行动作的条件（可选）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new SetValueAction(triggerOptions, target, propertyPath, value, condition)</span><br><span class="line">//此操作创建新的设置值操作</span><br><span class="line">//triggerOptions触发器选项</span><br><span class="line">// target   行动目标</span><br><span class="line">// propertyPath  行动目标</span><br><span class="line">// value 动作值</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">new DoNothingAction(triggerOptions, condition)  //不作为</span><br><span class="line"></span><br><span class="line">new SetStateAction(triggerOptions, target, value, condition)</span><br><span class="line"> //创建新的设置状态操作</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> //BABYLON.IncrementValueAction：向数字属性添加指定的值：</span><br><span class="line">IncrementValueAction(trigger, target, propertyPath, value, condition)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new StateCondition(actionManager, target, value) //状态条件构造函数</span><br><span class="line"> var condition1 = new BABYLON.StateCondition(sphere.actionManager, light1, &quot;off&quot;); //例子</span><br><span class="line"></span><br><span class="line"> animation.stop() //   完全停止， 要想开始动画，就要重建动画</span><br><span class="line">animation.pause() //  动画暂停，保存帧数</span><br><span class="line">animation.reset() //  动画回到第0帧 ， 但动画没启动</span><br><span class="line">animation.restart() //  动画启动， 从暂停的帧数开始</span><br></pre></td></tr></table></figure><h1 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//贴图视频</span><br><span class="line">var ground = BABYLON.Mesh.CreateGround(&quot;ground1&quot;, 6, 6, 2, scene);</span><br><span class="line">var mat = new BABYLON.StandardMaterial(&quot;mat&quot;, scene);</span><br><span class="line">var videoTexture = new BABYLON.VideoTexture(&quot;video&quot;, [&quot;video/babylonjs.mp4&quot;], scene, true, true);</span><br><span class="line">mat.diffuseTexture = videoTexture;</span><br><span class="line">ground.material = mat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//贴图翻转</span><br><span class="line"> materialSphere4.diffuseTexture.vOffset = 0.1; //垂直翻转</span><br><span class="line"> materialSphere4.diffuseTexture.uOffset = 0.4; //水平翻转</span><br><span class="line"> materialSphere6.backFaceCulling = false; //背面贴图显示</span><br><span class="line"> materialSphere5.diffuseTexture.hasAlpha = true;//适用png的透明（png比较消耗性能）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reflectionTexture  //反射纹理</span><br><span class="line"></span><br><span class="line">MirrorTexture  //镜子纹理</span><br><span class="line">mirror.material.reflectionTexture = new BABYLON.MirrorTexture(&quot;mirror&quot;, 1024, scene, true);</span><br><span class="line">mirror.material.reflectionTexture.mirrorPlane = new BABYLON.Plane(0, -1.0, 0, -2.0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//凹凸纹理</span><br><span class="line"> var bumpMaterial = new BABYLON.StandardMaterial(&quot;texture1&quot;, scene);</span><br><span class="line">bumpMaterial.diffuseColor = new BABYLON.Color3(0, 0, 1);//Blue</span><br><span class="line">bumpMaterial.bumpTexture = new BABYLON.Texture(&quot;textures/normalMap.jpg&quot;, scene);</span><br><span class="line"></span><br><span class="line">getTextureCoordinates()：计算所选点的纹理坐标; 这些将作为Vector2纹理空间返回，这意味着它的坐标将在0和1之间。</span><br></pre></td></tr></table></figure><h1 id="旋转轴"><a href="#旋转轴" class="headerlink" title="旋转轴"></a>旋转轴</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//门的旋转轴</span><br><span class="line">var door=scene.getMeshByName(&quot;56_Box03&quot;);</span><br><span class="line">var doorParent=new BABYLON.Mesh.CreateBox(&quot;doorParent&quot;,100,scene);</span><br><span class="line">doorParent.position=door.position.add(new BABYLON.Vector3(300,0,0));</span><br><span class="line">door.parent=doorParent;</span><br><span class="line">door.position=new BABYLON.Vector3.Zero().add(new BABYLON.Vector3(-300,0,0))</span><br></pre></td></tr></table></figure><h1 id="模型边框"><a href="#模型边框" class="headerlink" title="模型边框"></a>模型边框</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plan.renderOutline = true;</span><br><span class="line">plan.outlineWidth = 10;</span><br><span class="line">plan.outlineColor = new BABYLON.Color3(0, 1, 1);</span><br></pre></td></tr></table></figure><h1 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">//网格材质</span><br><span class="line">grid = new BABYLON.GridMaterial(&quot;grid&quot;, scene);</span><br><span class="line"></span><br><span class="line">scene.getMeshByName(&apos;woshichuanglian&apos;).material= grid;</span><br><span class="line"></span><br><span class="line">grid.gridRatio = 1;</span><br><span class="line">grid.majorUnitFrequency = 2;</span><br><span class="line">grid.minorUnitVisibility = 4;</span><br><span class="line"></span><br><span class="line">grid.opacity = 0.58;</span><br><span class="line">grid.mainColor = new BABYLON.Color3(1,1,1)</span><br><span class="line">grid.lineColor = new BABYLON.Color3(1,1,1)</span><br><span class="line"></span><br><span class="line">//多材质</span><br><span class="line">var multi = new BABYLON.MultiMaterial(&apos;multi&apos; , scene);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var hdrTexture = new BABYLON.HDRCubeTexture(&quot;img/room.hdr&quot;, scene, 512);</span><br><span class="line">var metal = new BABYLON.PBRMaterial(&quot;metal&quot;, scene);</span><br><span class="line">metal.reflectionTexture = hdrTexture; //反射纹理</span><br><span class="line">metal.directIntensity = 3; //直接灯的强度</span><br><span class="line">metal.specularIntensity = 5;</span><br><span class="line">metal.emissiveIntensity = 100; //材料的发射部分的强度。 这有助于控制发光效果而不修改发光颜色。</span><br><span class="line">metal.environmentIntensity = 1; //环境的强度，例如环境将会点亮对象多少 无论是通过粗糙材料的谐波或通过对闪亮材料的补偿</span><br><span class="line">metal.cameraExposure = 1.2; //相机曝光  亮度</span><br><span class="line">metal.cameraContrast = 1; //相机对比度  明暗对比</span><br><span class="line">metal.microSurface =0.9; //反射出的物体的细致程度</span><br><span class="line">metal.useRadianceOverAlpha = true; //指定材料会将反射亮点保持在透明表面上</span><br><span class="line">metal.reflectivityColor = new BABYLON.Color3(1, 1, 1); //反射的物体</span><br><span class="line">metal.albedoColor = new BABYLON.Color3(1, 1, 1); //反射出的光</span><br><span class="line">mesh[0].material = metal;</span><br><span class="line"></span><br><span class="line">//如果纹理有alpha 设置hasAlpha为true</span><br><span class="line">materialSphere1.diffuseTexture.hasAlpha = true;</span><br><span class="line">materialSphere1.useAlphaFromDiffuseTexture = true //alpha混合</span><br><span class="line"></span><br><span class="line">//所产生的颜色与漫反射颜色相乘。如果要使用烘烤成纹理的光照贴图，这一点尤其有用。您可以使用ambientColor属性指定纯色：</span><br><span class="line">materialSphere1.ambientColor = new BABYLON.Color3(1, 0.2, 0.7);</span><br><span class="line">materialSphere1.ambientTexture = new BABYLON.Texture(&quot;grass.png&quot;, scene);</span><br><span class="line"></span><br><span class="line">directIntensity：控制材料反射的漫反射和镜面反射量。</span><br><span class="line">emissiveIntensity：控制材料发射的发射光的水平。</span><br><span class="line">environmentIntensity：控制来自环境的反射光的水平。</span><br><span class="line">specularIntensity：由于材料仍然使用像闪光计算那样的blinn Phong，这可以帮助降低材料的镜面水平而不会影响反射率。</span><br><span class="line"></span><br><span class="line">pbr.cameraExposure = 0.66; //相机曝光</span><br><span class="line">pbr.cameraContrast = 1.66; //相机对比度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">materialSphere.albedoColor = new BABYLON.Color3(0.2, 0.9, 1.0); //球颜色</span><br><span class="line">materialSphere.reflectivityColor = new BABYLON.Color3(0.8, 0.8, 0.8); //反射率颜色 ，黑色镜面将意味着几乎没有反射，白色将从完美的镜子接近</span><br><span class="line">materialSphere.microSurface = 0.98;//越高，光泽度越高 反射越清晰</span><br><span class="line">materialSphere.usePhysicalLightFalloff = false;</span><br><span class="line">//光泽度存储在反射率图的alpha通道中，可以防止在一种材料上具有恒定的光泽度</span><br><span class="line">materialSphere.useMicroSurfaceFromReflectivityMap = false;</span><br><span class="line">pbr.useMicroSurfaceFromReflectivityMapAlpha = true;</span><br><span class="line"></span><br><span class="line">//环境色彩需要设置场景的环境颜色，给予环境背景照明。</span><br><span class="line">scene.ambientColor = new BABYLON.Color3(1, 1, 1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TexturesMode</span><br><span class="line">coordinatesMode: int (0 = explicit, 1 = spherical, 2 = planar, 3 = cubic, 4 = projection, 5 = skybox),</span><br><span class="line">projectionMat.reflectionTexture.coordinatesMode = BABYLON.Texture.PROJECTION_MODE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> billboardMode</span><br><span class="line"> &quot;billboardMode&quot;: int (0 = None, 1 = X, 2 = Y, 4 = Z, 7 = All),</span><br><span class="line"> CreatePlane.billboardMode = BABYLON.AbstractMesh.BILLBOARDMODE_ALL; //始终面向你 广告板</span><br><span class="line"></span><br><span class="line"> material.maxSimultaneousLights = lightsCount; //最大同时能接受灯光</span><br><span class="line"></span><br><span class="line">material.disableLighting = true;</span><br><span class="line">材质不收灯光影响</span><br><span class="line"></span><br><span class="line"> mat.diffuseColor = BABYLON.Color3.FromInts(121,189,224);</span><br><span class="line"> mat.diffuseColor = BABYLON.Color3.FromeHexDtring(&quot;#000000&quot;);</span><br><span class="line"></span><br><span class="line"> PBRMaterial不受灯光影响；</span><br></pre></td></tr></table></figure><h1 id="高度地图"><a href="#高度地图" class="headerlink" title="高度地图"></a>高度地图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//高度地图</span><br><span class="line">var ground = BABYLON.Mesh.CreateGroundFromHeightMap(&quot;ground&quot;, &quot;worldHeightMap.jpg&quot;, 200, 200, 250, 0, 10, scene, false, successCallback);</span><br><span class="line">//  名称</span><br><span class="line">//  高度地图图片网址</span><br><span class="line">//  此网格的大小：</span><br><span class="line">//  宽度</span><br><span class="line">//  高度</span><br><span class="line">//  细分数量：增加此网格的复杂性，以提高其视觉质量：</span><br><span class="line">//  最小高度：网格的最低水平</span><br><span class="line">//  最大高度：网格的最高水平</span><br><span class="line">//  场景：实际场景</span><br><span class="line">//  可更新：表示如果此网孔可以动态在未来被更新（布尔）</span><br><span class="line">//  successCallback：将在创建高度图并创建顶点数据后调用。它是一个具有网格作为其第一个变量的函数。</span><br><span class="line"></span><br><span class="line">//  最后，当我们的新网格准备好了，我们只需应用我们的材料：</span><br><span class="line">ground.material = groundMaterial;</span><br></pre></td></tr></table></figure><h1 id="发光"><a href="#发光" class="headerlink" title="发光"></a>发光</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//   http://doc.babylonjs.com/tutorials/highlight_layer</span><br><span class="line"> var hl = new BABYLON.HighlightLayer(&quot;hl1&quot;, scene);</span><br><span class="line"> hl.addMesh(box, BABYLON.Color3.Green());</span><br><span class="line"> hl.isEnabled   = true;</span><br><span class="line"></span><br><span class="line"> //想让体积散射光放到mesh上时 ， 必须给mesh加上material</span><br><span class="line">var godrays = new BABYLON.VolumetricLightScatteringPostProcess(&apos;godrays&apos;,1, camera, sphere, 100, BABYLON.Texture.BILINEAR_SAMPLINGMODE, engine, true);</span><br></pre></td></tr></table></figure><h1 id="展示边界"><a href="#展示边界" class="headerlink" title="展示边界"></a>展示边界</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mesh.showBoundingBox =true;</span><br></pre></td></tr></table></figure><h1 id="粒子体统"><a href="#粒子体统" class="headerlink" title="粒子体统"></a>粒子体统</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//创建粒子系统</span><br><span class="line">var particleSystem = new BABYLON.ParticleSystem(&quot;particles&quot;, 2000, scene, customEffect);</span><br><span class="line">//第一个参数是名称，第二个参数是粒子的最大数量，第三个参数是场景，</span><br><span class="line">//可选的第四个参数是对粒子的着色效果的引用，覆盖默认着色器</span><br><span class="line">// 把blendmode换成下面这个就可以了。但是颜色好像有影响。</span><br><span class="line">BLENDMODE_ONEONE //- colors are added without alpha affecting the result; //粒子颜色不受alpha影响。</span><br><span class="line">BLENDMODE_STANDARD //- colors are added using particle’s alpha. //粒子颜色使用粒子本身alpha</span><br></pre></td></tr></table></figure><h1 id="天空盒"><a href="#天空盒" class="headerlink" title="天空盒"></a>天空盒</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> // Skybox 天空盒</span><br><span class="line">var hdrSkybox = BABYLON.Mesh.CreateBox(&quot;hdrSkyBox&quot;, 1000.0, scene);</span><br><span class="line">var hdrSkyboxMaterial = new BABYLON.PBRMaterial(&quot;skyBox&quot;, scene);</span><br><span class="line">hdrSkyboxMaterial.backFaceCulling = false;</span><br><span class="line">hdrSkyboxMaterial.reflectionTexture = hdrTexture.clone();</span><br><span class="line">hdrSkyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;</span><br><span class="line">hdrSkyboxMaterial.microSurface = 1.0;</span><br><span class="line">hdrSkyboxMaterial.cameraExposure = 0.6;</span><br><span class="line">hdrSkyboxMaterial.cameraContrast = 1.6;</span><br><span class="line">hdrSkyboxMaterial.disableLighting = true;</span><br><span class="line">hdrSkybox.material = hdrSkyboxMaterial;</span><br><span class="line">hdrSkybox.infiniteDistance = true;</span><br><span class="line"></span><br><span class="line">skybox.infiniteDistance = true; //无线距离</span><br><span class="line">skybox.renderingGroupId = 0;</span><br><span class="line">skyboxMaterial.disableLighting = true; //对光照没反应， 不能照明</span><br><span class="line"></span><br><span class="line">//图片命名</span><br><span class="line">n开头的都在相应轴的反方向</span><br><span class="line">_nx</span><br><span class="line">_ny</span><br><span class="line">_nz</span><br><span class="line">p开头的都在相应轴的正方向</span><br><span class="line">_px</span><br><span class="line">_py</span><br><span class="line">_pz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//场景默认天空盒</span><br><span class="line">scene.imageProcessingConfiguration.contrast = 1;  //对比度</span><br><span class="line">scene.imageProcessingConfiguration.exposure = 1;  //曝光</span><br><span class="line">scene.imageProcessingConfiguration.toneMappingEnabled = true;  //色调映射启用</span><br><span class="line">// var hdrTexture = new BABYLON.CubeTexture.CreateFromPrefilteredData(&quot;images/environment.dds&quot;, scene);  //场景天空盒的图片， 可以是.dds文件</span><br><span class="line">var hdrTexture =new BABYLON.CubeTexture(&apos;images/cubemap/cubemap&apos;, scene); //场景天空盒的图片，可以是图片</span><br><span class="line">// hdrTexture.gammaSpace = false;  //贴图的空间 ， 不知道干什么用</span><br><span class="line">var sky = scene.createDefaultSkybox(hdrTexture, true, 100000, 1);  //绘制场景天空盒 ， 第一个参数是文件， 第二个参数是pbr材质， 第三是范围， 半径， 第四是模糊程度（0是不模糊）</span><br><span class="line">//本质上就是创建了一个很大的天空盒， 用了pbr材质， 然后贴了材质并且模糊， 就是这样:)</span><br><span class="line">/*注意： 再这只场景天空盒子的时候， 场景内默认的pbr材质的反射和折射贴图，默认为场景天空盒的贴图*/</span><br><span class="line"></span><br><span class="line">//创建场景默认的灯光和相机</span><br><span class="line">scene.createDefaultCameraOrLight(true, true, true);</span><br></pre></td></tr></table></figure><h1 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//阴影</span><br><span class="line">var shadowGenerator = new BABYLON.ShadowGenerator(2048, light2);</span><br><span class="line">shadowGenerator.setDarkness(0);//阴影黑暗程度</span><br><span class="line">shadowGenerator.usePoissonSampling = true;</span><br><span class="line">plane.receiveShadows = true;</span><br><span class="line"></span><br><span class="line">shadowGenerator.getShadowMap().renderList.push(mesh[0]);</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//选择要反射的物体</span><br><span class="line">var probe = new BABYLON.ReflectionProbe(&quot;main&quot;, 512, scene);</span><br><span class="line">probe.renderList.push(plane);</span><br><span class="line">probe.attachToMesh(mesh);</span><br><span class="line"></span><br><span class="line"> var mainMaterial = new BABYLON.ReflectionProbe(&quot;meta2&quot;, scene);</span><br><span class="line"> mainMaterial.diffuseColor = new BABYLON.Color3(1, 0.5, 0.5);</span><br><span class="line"> mainMaterial.reflectionTexture = probe.cubeTexture;</span><br><span class="line"> mainMaterial.reflectionFresnelParameters = new BABYLON.FresnelParameters();</span><br><span class="line"> mainMaterial.reflectionFresnelParameters.bias = 0.02;</span><br><span class="line"> mesh[0].material = mainMaterial;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//镜面反射</span><br><span class="line">var material3 = new BABYLON.StandardMaterial(&apos;met3&apos; , scene)</span><br><span class="line">material3.reflectionTexture = new BABYLON.MirrorTexture(&apos;mirror&apos; ,512, scene, true); //镜子纹理</span><br><span class="line">material3.reflectionTexture.mirrorPlane= new BABYLON.Plane(0,-1.0,0,-10.0); //反射层</span><br><span class="line">material3.reflectionTexture.renderList = [plane]; //添加把要反射的东西</span><br><span class="line">material3.reflectionTexture.level = 0.6;</span><br><span class="line">mesh[0].material = material3;</span><br><span class="line"></span><br><span class="line">// 设置反射材质时候，如果反射材质没出现，看看是不是光强度太大【还可以设置材质不受光照影响】</span><br></pre></td></tr></table></figure><h1 id="折射"><a href="#折射" class="headerlink" title="折射"></a>折射</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//折射</span><br><span class="line">//平面</span><br><span class="line">var refractionTexture = new BABYLON.RefractionTexture(&quot;th&quot;, 1024, scene);</span><br><span class="line">  refractionTexture.renderList.push(yellowSphere);</span><br><span class="line">  refractionTexture.renderList.push(greenSphere);</span><br><span class="line">  refractionTexture.renderList.push(ground);</span><br><span class="line">  refractionTexture.refractionPlane = new BABYLON.Plane(0, 0, -1, 0);</span><br><span class="line">  refractionTexture.depth = 2.0;</span><br><span class="line">//非平面</span><br><span class="line">var probe = new BABYLON.ReflectionProbe(&quot;main&quot;, 512, scene);</span><br><span class="line">probe.renderList.push(yellowSphere);</span><br><span class="line">probe.renderList.push(greenSphere);</span><br><span class="line">probe.renderList.push(blueSphere);</span><br><span class="line">probe.renderList.push(mirror);</span><br><span class="line">mainMaterial.refractionTexture = probe.cubeTexture;</span><br><span class="line"></span><br><span class="line">//得要有refraction</span><br><span class="line">materialSphere3.indexOfRefraction = 1; //折射率越大， 镜片越薄，看起来越折射</span><br></pre></td></tr></table></figure><h1 id="菲涅尔"><a href="#菲涅尔" class="headerlink" title="菲涅尔"></a>菲涅尔</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//只有standardMaterial 才有fresnel</span><br><span class="line">StandardMaterial.diffuseFresnelParameters</span><br><span class="line">StandardMaterial.opacityFresnelParameters</span><br><span class="line">StandardMaterial.reflectionFresnelParameters</span><br><span class="line">StandardMaterial.emissiveFresnelParameters</span><br><span class="line">StandardMaterial.refractionFresnelParameters</span><br><span class="line"></span><br><span class="line">//FresnelParameters</span><br><span class="line">isEnabled 激活或停用菲涅尔效应</span><br><span class="line">leftColor 定义边缘上使用的颜色</span><br><span class="line">rightColor 定义中心使用的颜色</span><br><span class="line">bias 定义施加到计算的菲涅尔项的偏差 数值越大越模糊，能容忍的误差越大</span><br><span class="line">power 菲涅耳期的指数的权力 越大界限越明显，中心地带越清晰</span><br></pre></td></tr></table></figure><h1 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pilot.translate(vector, distance, space) //space == BABYLON.Space.WORLD || BABYLON.Space.LOCAL</span><br><span class="line">greenSphere.setPivotMatrix(BABYLON.Matrix.Translation(0, 0, 3)); //在不改变旋转轴的情况下，移动位置</span><br><span class="line">greenSphere.setPivotPoint() // 改变轴心的位置</span><br><span class="line">greenSphere.position = new BABYLON.Vector3(0,0,3) //旋转轴随着物体的改变而改变</span><br></pre></td></tr></table></figure><h1 id="轴"><a href="#轴" class="headerlink" title="轴"></a>轴</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">BABYLON.Space.LOCAL  //本地轴</span><br><span class="line">BABYLON.Space.WORLD  //世界轴</span><br><span class="line">sphere.flipFaces(); //法线反向</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//通过如下创建四元数来设置rotationQuaternion属性给定轴和角度</span><br><span class="line">var axis = new BABYLON.Vector3(2, 6, 4);</span><br><span class="line">var angle = 0;</span><br><span class="line">mesh.rotationQuaternion = new BABYLON.Quaternion.RotationAxis(axis, angle);</span><br></pre></td></tr></table></figure><h1 id="babylon截屏gongju"><a href="#babylon截屏gongju" class="headerlink" title="babylon截屏gongju"></a>babylon截屏gongju</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//babylon截屏工具</span><br><span class="line"> var size = &#123; width: 1000, height: 900&#125; // 512，size = &#123; precision: 2 &#125;;</span><br><span class="line">  BABYLON.Tools.CreateScreenshot(engine, touchCamera, size);</span><br></pre></td></tr></table></figure><h1 id="instance-实例"><a href="#instance-实例" class="headerlink" title="instance 实例"></a>instance 实例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//instance 实例</span><br><span class="line">var mesh = newMeshes[0];</span><br><span class="line">for (var index = 0; index &lt; 100; index++) &#123;</span><br><span class="line">    var newInstance = mesh.createInstance(&quot;i&quot; + index);</span><br><span class="line">&#125;</span><br><span class="line">// 实例具有与网格相同的材质,支持碰撞，挑选，渲染和阴影</span><br><span class="line">. position</span><br><span class="line">.rotation</span><br><span class="line">.rotationQuaternion</span><br><span class="line">.setPivotMatrix</span><br><span class="line">.scaling</span><br></pre></td></tr></table></figure><h1 id="相机视图-多相机"><a href="#相机视图-多相机" class="headerlink" title="相机视图 (多相机)"></a>相机视图 (多相机)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BABYLON.Viewport = function (x, y, width, height);</span><br><span class="line">camera.viewport = new BABYLON.Viewport(0, 0, 1, 1);</span><br><span class="line">camera2.viewport = new BABYLON.Viewport(0,0, 0.5, 0.5);</span><br><span class="line"></span><br><span class="line">scene.activeCameras.push(camera);</span><br><span class="line">scene.activeCameras.push(camera2);</span><br></pre></td></tr></table></figure><h1 id="视图清晰程度"><a href="#视图清晰程度" class="headerlink" title="视图清晰程度"></a>视图清晰程度</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//像素精确度，数值越大，越模糊</span><br><span class="line"> engine.setHardwareScalingLevel(0.2)</span><br></pre></td></tr></table></figure><h1 id="gui"><a href="#gui" class="headerlink" title="gui"></a>gui</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//gui</span><br><span class="line">  var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateForMesh(plane);</span><br><span class="line"></span><br><span class="line">   var text1 = new BABYLON.GUI.TextBlock();</span><br><span class="line">   text1.text = &quot;Hello world&quot;;</span><br><span class="line">   text1.color = &quot;green&quot;;</span><br><span class="line">   text1.fontSize =80;</span><br><span class="line">   text1.textHorizontalAlignment = 0;</span><br><span class="line">   advancedTexture.addControl(text1);</span><br><span class="line"></span><br><span class="line">   var text2 = new BABYLON.GUI.TextBlock();</span><br><span class="line">   text2.text = &quot;1111111&quot;;</span><br><span class="line">   text2.color = &quot;green&quot;;</span><br><span class="line">   text2.fontSize =80;</span><br><span class="line">   text2.textHorizontalAlignment = 1;</span><br><span class="line">   advancedTexture.addControl(text2);</span><br><span class="line"></span><br><span class="line">   var image = new BABYLON.GUI.Image(&quot;but&quot;, &quot;./images/ruler.png&quot;);</span><br><span class="line">   image.width = 0.2;</span><br><span class="line">   image.height = 0.2;</span><br><span class="line">   advancedTexture.addControl(image);</span><br></pre></td></tr></table></figure><h1 id="动态贴图"><a href="#动态贴图" class="headerlink" title="动态贴图"></a>动态贴图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 动态贴图 (图片)</span><br><span class="line">var dynTexture = new BABYLON.DynamicTexture(&apos;texture&apos;, 512, scene, true);</span><br><span class="line">dynTexture.hasAlpha = true ;</span><br><span class="line">var ctx = dynTexture.getContext();</span><br><span class="line">var font = &apos;1.2rem Arial&apos;;</span><br><span class="line">var size = dynTexture.getSize();</span><br><span class="line">var img = new Image();</span><br><span class="line">//img.src = &apos;./images/ruler.png&apos;;</span><br><span class="line"></span><br><span class="line">//dynTexture.drawText(&apos;hello, worls&apos;,50,70,font, &apos;green&apos;,&apos;red&apos;);</span><br><span class="line">//dynTexture.drawText(&apos;arre&apos;,50,100,font, &apos;green&apos;,&apos;red&apos;);</span><br><span class="line"></span><br><span class="line">img.src = &apos;./images/content.png&apos;;</span><br><span class="line">img.onload = function () &#123;</span><br><span class="line">    ctx.drawImage(img,0,0,size.width, size.height);</span><br><span class="line">    //ctx.drawImage(img,0,0);</span><br><span class="line">    dynTexture.update(false);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="视差映射"><a href="#视差映射" class="headerlink" title="视差映射"></a>视差映射</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//=====视差映射==</span><br><span class="line">  您可以通过以下材料使用视差映射：</span><br><span class="line">  StandardMaterial</span><br><span class="line">  PBRMaterial</span><br><span class="line"></span><br><span class="line">  useParallax：启用Bump上的视差映射。如果您没有分配一个bumpTexture，这些属性将不会有任何影响。</span><br><span class="line">  useParallaxOcclusion：启用视差遮挡，设置此属性时，还必须将useParallax设置为true。</span><br><span class="line">  allaxScaleBias：应用缩放因子，确定哪个“深度”应该代表高度图。视差值在0.05和0.1之间是合理的，您可以使用视差遮挡达到0.2。</span><br></pre></td></tr></table></figure><h1 id="获取二维坐标"><a href="#获取二维坐标" class="headerlink" title="获取二维坐标"></a>获取二维坐标</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 2D</span><br><span class="line">// 1.获取模型的在画布上面的二维坐标</span><br><span class="line"></span><br><span class="line"> var mesh2d = BABYLON.Vector3.Project(mesh.position,</span><br><span class="line">             BABYLON.Matrix.Identity(),</span><br><span class="line">             scene.getTransformMatrix(),</span><br><span class="line">             camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight()));</span><br><span class="line">console.log(mesh2d.y)</span><br><span class="line">console.log(mesh2d.x)</span><br><span class="line">// 2.在最小宽度为760所以小于760的尺寸如移动端 必须使用百分比获取坐标</span><br><span class="line"></span><br><span class="line">var mesh2d = BABYLON.Vector3.Project(mesh.position,</span><br><span class="line">                BABYLON.Matrix.Identity(),</span><br><span class="line">                scene.getTransformMatrix(),</span><br><span class="line">                camera.viewport.toGlobal(engine.getRenderWidth(), engine.getRenderHeight()));</span><br><span class="line">console.log(mesh2d.y/engine.getRenderHeight()*100+&quot;%&quot;)</span><br><span class="line">console.log(mesh2d.x/engine.getRenderWidth()*100+&quot;%&quot;)</span><br></pre></td></tr></table></figure><h1 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//点击事件</span><br><span class="line">   scene.onPointerObservable.add(function (e) &#123;</span><br><span class="line"></span><br><span class="line">      console.log(e.pickInfo.pickedMesh.name)</span><br><span class="line"></span><br><span class="line">   &#125;, BABYLON.PointerEventTypes.POINTERDOWN);</span><br><span class="line"></span><br><span class="line">   //点击类型</span><br><span class="line">    scene.onPointerObservable.add((pointerInfo) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    if(pointerInfo.pickInfo.hit)&#123;</span><br><span class="line">        console.log(pointerInfo.pickInfo.pickedMesh.name)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">switch (pointerInfo.type) &#123;</span><br><span class="line">case BABYLON.PointerEventTypes.POINTERDOWN:</span><br><span class="line">console.log(&quot;POINTER DOWN&quot;);</span><br><span class="line">break;</span><br><span class="line">case BABYLON.PointerEventTypes.POINTERUP:</span><br><span class="line">console.log(&quot;POINTER UP&quot;);</span><br><span class="line">break;</span><br><span class="line">case BABYLON.PointerEventTypes.POINTERMOVE:</span><br><span class="line">console.log(&quot;POINTER MOVE&quot;);</span><br><span class="line">break;</span><br><span class="line">case BABYLON.PointerEventTypes.POINTERWHEEL:</span><br><span class="line">console.log(&quot;POINTER WHEEL&quot;); //滚轮</span><br><span class="line">break;</span><br><span class="line">case BABYLON.PointerEventTypes.POINTERPICK:</span><br><span class="line">console.log(&quot;POINTER PICK&quot;);</span><br><span class="line">break;</span><br><span class="line">case BABYLON.PointerEventTypes.POINTERTAP:</span><br><span class="line">console.log(&quot;POINTER TAP&quot;);</span><br><span class="line">break;</span><br><span class="line">case BABYLON.PointerEventTypes.POINTERDOUBLETAP:</span><br><span class="line">console.log(&quot;POINTER DOUBLE-TAP&quot;);  //双击</span><br><span class="line">break;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">scene.onKeyboardObservable.add((kbInfo) =&gt; &#123;</span><br><span class="line">switch (kbInfo.type) &#123;</span><br><span class="line">case BABYLON.KeyboardEventTypes.KEYDOWN:</span><br><span class="line">console.log(&quot;KEY DOWN: &quot;);</span><br><span class="line">break;</span><br><span class="line">case BABYLON.KeyboardEventTypes.KEYUP:</span><br><span class="line">console.log(&quot;KEY UP: &quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="babylon生成png"><a href="#babylon生成png" class="headerlink" title="babylon生成png"></a>babylon生成png</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1，创建网格后</span><br><span class="line">//BABYLON.Tools.CreateScreenshotUsingRenderTarget(engine, camera, size, function(data)&#123;</span><br><span class="line">//   获取的图片</span><br><span class="line">//&#125;)</span><br><span class="line">BABYLON.Tools.CreateScreenshotUsingRenderTarget(engine, scene.activeCamera, 400);</span><br><span class="line"></span><br><span class="line">2，创建网格时</span><br><span class="line">BABYLON.Tools.CreateScreenshot(engine, camera, 400);</span><br></pre></td></tr></table></figure><h1 id="手机调试"><a href="#手机调试" class="headerlink" title="手机调试"></a>手机调试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 手机调试</span><br><span class="line"></span><br><span class="line">/*Vorlon.js安装过程非常简单，只需下面几步即可完成：</span><br><span class="line"></span><br><span class="line">从npm安装vorlon.js服务器：$ npm i -g vorlon；</span><br><span class="line">运行vorlon.js服务器：$ vorlon，此时可以在浏览器中打开http://localhost:1337，查看仪表盘页面；</span><br><span class="line">向应用添加script标签，启用vorlon.js：&lt;script src=&quot;http://10.0.4.102:1337/vorlon.js&quot;&gt;&lt;/script&gt;。</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h1 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var anim = scene.beginAnimation(box1, 0, 100, false);</span><br><span class="line">console.log(&quot;before&quot;);</span><br><span class="line">await anim.waitAsync();  //等待异步执行完毕， 在执行下一步</span><br><span class="line">console.log(&quot;after&quot;);</span><br></pre></td></tr></table></figure><h1 id="闭塞查询"><a href="#闭塞查询" class="headerlink" title="闭塞查询"></a>闭塞查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 闭塞的查询   http://doc.babylonjs.com/features/occlusionquery</span><br><span class="line">   mesh.occlusionQueryAlgorithmType = BABYLON.AbstractMesh.OCCLUSION_ALGORITHM_TYPE_ACCURATE;</span><br><span class="line">   mesh.isOccluded = true;</span><br><span class="line">   mesh.occlusionType = BABYLON.AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC;</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul><li><a href="https://doc.babylonjs.com/how_to/how_to_use_lens_flares" target="_blank" rel="noopener">https://doc.babylonjs.com/how_to/how_to_use_lens_flares</a>    镜头光晕</li><li><a href="https://www.babylonjs-playground.com/#1282WV#11" target="_blank" rel="noopener">https://www.babylonjs-playground.com/#1282WV#11</a> 二维坐标转成三维坐标</li><li><a href="https://www.babylonjs-playground.com/#1SLLOJ#420" target="_blank" rel="noopener">https://www.babylonjs-playground.com/#1SLLOJ#420</a>  // 变形<br><a href="https://www.babylonjs-playground.com/#1AD81E#7" target="_blank" rel="noopener">https://www.babylonjs-playground.com/#1AD81E#7</a><br> <a href="https://www.babylonjs-playground.com/#1M67K8#18" target="_blank" rel="noopener">https://www.babylonjs-playground.com/#1M67K8#18</a></li><li><a href="https://www.babylonjs-playground.com/#9NHBCC#1" target="_blank" rel="noopener">https://www.babylonjs-playground.com/#9NHBCC#1</a>  烟花</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相机&quot;&gt;&lt;a href=&quot;#相机&quot; class=&quot;headerlink&quot; title=&quot;相机&quot;&gt;&lt;/a&gt;相机&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://lizengguangxx.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="babylon" scheme="https://lizengguangxx.github.io/tags/babylon/"/>
    
      <category term="3D" scheme="https://lizengguangxx.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>我的博客.</title>
    <link href="https://lizengguangxx.github.io/2018/10/31/My-New-Post/"/>
    <id>https://lizengguangxx.github.io/2018/10/31/My-New-Post/</id>
    <published>2018-10-31T06:38:00.000Z</published>
    <updated>2018-11-01T09:22:04.291Z</updated>
    
    <content type="html"><![CDATA[<p>我的第一个博客，哈哈哈</p><p>正在配置中。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的第一个博客，哈哈哈&lt;/p&gt;
&lt;p&gt;正在配置中。。。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lizengguangxx.github.io/2018/10/31/hello-world/"/>
    <id>https://lizengguangxx.github.io/2018/10/31/hello-world/</id>
    <published>2018-10-31T06:12:34.883Z</published>
    <updated>2017-10-28T00:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
